{"pageProps":{"posts":[{"slug":"css-only-responsive-navbar","title":"CSS only responsive Navbar","intro":"How to build a CSS responsive navigation bar menu without JavaScript","img":"/images/posts/css-only-responsive-navbar.jpg","date":"10/31/2022","categories":"css, tutorial","link":"/blog/css-only-responsive-navbar"},{"slug":"change-nextjs-error-pages","title":"Change Next.js error pages","intro":"How to change the default Next.js error pages and make it your own","img":"/images/posts/change-nextjs-error-pages.jpg","date":"08/17/2022","categories":"next.js, tutorial","link":"/blog/change-nextjs-error-pages"},{"slug":"get-web-analytics-in-nextjs-with-goatcounter","title":"Get web analytics in Next.js with Goatcounter","intro":"How to track your Next.js web analytics without tracking of personal data with Goatcounter","img":"/images/posts/get-web-analytics-in-nextjs-with-goatcounter.jpg","date":"04/07/2022","categories":"next.js, tutorial, analytics","link":"/blog/get-web-analytics-in-nextjs-with-goatcounter"},{"slug":"generate-a-sitemap-in-nextjs","title":"Generate a sitemap in Next.js","intro":"How to generate an automatic and custom sitemap in your Next.js build?","img":"/images/posts/generate-a-sitemap-in-nextjs.jpg","date":"02/25/2022","categories":"next.js, tutorial","link":"/blog/generate-a-sitemap-in-nextjs"},{"slug":"set-up-eslint-into-nextjs","title":"Set up ESLint into Next.js","intro":"How to set up the ESLint linter into a Next.js project","img":"/images/posts/set-up-eslint-into-nextjs.jpg","date":"02/11/2022","categories":"next.js, tutorial","link":"/blog/set-up-eslint-into-nextjs"},{"slug":"fix-the-window-is-not-defined-error","title":"Fix the Window is not defined error","intro":"How to fix the error Window is not defined in Next.js","img":"/images/posts/fix-the-window-is-not-defined-error.jpg","date":"01/22/2022","categories":"next.js, tutorial","link":"/blog/fix-the-window-is-not-defined-error"},{"slug":"nextjs-dark-mode","title":"Next.js dark mode","intro":"How to add a dark mode to your Next.js site","img":"/images/posts/nextjs-dark-mode.jpg","date":"01/15/2022","categories":"next.js, tutorial","link":"/blog/nextjs-dark-mode"},{"slug":"markdown-tutorial","title":"Markdown Tutorial","intro":"Introduction tutorial to the Markdown language","img":"/images/posts/markdown-tutorial.jpg","date":"12/28/2021","categories":"tutorial","link":"/blog/markdown-tutorial"},{"slug":"set-nextjs-lang","title":"Set Next.js lang","intro":"Specify HTML lang attribute in a Next.js site","img":"/images/posts/set-nextjs-lang.jpg","date":"12/27/2021","categories":"next.js, tutorial","link":"/blog/set-nextjs-lang"}],"content":"<p>Next.js handles many aspects of our website out of the box but, sometimes we want to go a step extra and change what they decided. One of those times was to change the default error pages to have something in line with the whole website. Let&#39;s see how we can make those pages our playing ground!</p>\n<h2 id=\"error-404-page\">Error 404 page</h2>\n<p>Modifying the error 404 page is one step that we can&#39;t overlook. Every wrong or dead link will point to that page and we must take that to our advantage. It&#39;s as simple as creating <code>404.js</code> in the pages folder.</p>\n<pre><code class=\"language-js\">export default function Custom404() {\n  return &lt;h1&gt;404 - Page Not Found&lt;/h1&gt;\n}</code></pre>\n<h2 id=\"error-500-page\">Error 500 page</h2>\n<p>Set up the error 500 page is another step that we should manage. In the same fashion as the 404, we create a <code>500.js</code> file in the pages folder.</p>\n<pre><code class=\"language-js\">export default function Custom500() {\n  return &lt;h1&gt;500 - Server-side error occurred&lt;/h1&gt;\n}</code></pre>\n<h2 id=\"create-the-_errorjs-page\">Create the _error.js page</h2>\n<p>This is the way to unlock the error page for customisation. We create a new file at the root of the pages folder with the name <code>_error.js</code> and we can start with the code from the official documentation.</p>\n<pre><code class=\"language-js\">function Error({ statusCode }) {\n  return (\n    &lt;p&gt;\n      {statusCode\n        ? `An error ${statusCode} occurred on server`\n        : &#39;An error occurred on client&#39;}\n    &lt;/p&gt;\n  )\n}\n\nError.getInitialProps = ({ res, err }) =&gt; {\n  const statusCode = res ? res.statusCode : err ? err.statusCode : 404\n  return { statusCode }\n}\n\nexport default Error</code></pre>\n<p>From there, we are now able to modify the wording on these pages, but not only. Almost everything that you can do with Next.js you, can do in this custom error page. Styling, adding components, and much more. </p>\n<p>Sadly, as pointed in the <a href=\"https://nextjs.org/docs/advanced-features/custom-error-page\">official documentation</a>, <code>_error.js</code> does not currently support Next.js Data Fetching methods like <code>getStaticProps</code> or <code>getServerSideProps</code>.</p>\n<p>Enjoy coding with Next.js!</p>\n","title":"Change Next.js error pages","description":"How to change the default Next.js error pages and make it your own","img":"/images/posts/change-nextjs-error-pages.jpg","url":"https://remybeumier.be/blog/change-nextjs-error-pages","date":"08/17/2022","categories":"next.js, tutorial"},"__N_SSG":true}