{"pageProps":{"posts":[{"slug":"nextjs-darkmode","title":"Next.js dark mode","intro":"How to add a dark mode to your Next.js site","img":"/images/posts/nextjs-dark-mode.jpg","date":"01/15/2022","categories":"next.js, tutorial","link":"/blog/nextjs-darkmode"},{"slug":"markdown-tutorial","title":"Markdown Tutorial","intro":"Introduction tutorial to the Markdown language","img":"/images/posts/markdown-tutorial.jpg","date":"12/28/2021","categories":"tutorial","link":"/blog/markdown-tutorial"},{"slug":"set-nextjs-lang","title":"Set Next.js lang","intro":"Specify HTML lang attribute in a Next.js site","img":"/images/posts/set-nextjs-lang.jpg","date":"12/27/2021","categories":"next.js, tutorial","link":"/blog/set-nextjs-lang"}],"data":{"title":"Next.js dark mode","intro":"How to add a dark mode to your Next.js site","img":"/images/posts/nextjs-dark-mode.jpg","content":"<p>When I started listing the features I wanted for my new website, a dark mode toggle was in the top tier list as it&#39;s becoming a standard. Even though I&#39;m not a big supporter of dark mode, I know people love it and I was willing to tackle this challenge.</p>\n<h2 id=\"the-css-part\">The CSS part</h2>\n<p>For this feature, I wanted to use CSS variables. I have a range of variables that will switch according to the color mode.\nHere is a snippet example:</p>\n<pre><code class=\"language-css\">main {\n  --text: #000000;\n  --text2: #333333;\n  --bg2: #eeeeee;\n  --bg: #ffffff;\n}</code></pre>\n<p>Here the dark mode style if the <code>.dark</code> class is applied. We will see the JavaScript later:</p>\n<pre><code class=\"language-css\">main.dark {\n  --text: #ffffff;\n  --text2: #eeeeee;\n  --bg2: #333333;\n  --bg: #000000;\n}</code></pre>\n<p>To finalise the styling part, I use the <code>prefers-color-scheme</code> check to match users settings.\nIt needs to be overridden with the <code>.light</code> class.\nThis is done this way:</p>\n<pre><code class=\"language-css\">@media (prefers-color-scheme: dark) {\n  main {\n    --text: #ffffff;\n    --text2: #eeeeee;\n    --bg2: #333333;\n    --bg: #000000;\n  }\n  main.light {\n    --text: #000000;\n    --text2: #333333;\n    --bg2: #eeeeee;\n    --bg: #ffffff;\n  }\n}</code></pre>\n<h2 id=\"the-javascript-and-nextjs-part\">The JavaScript and Next.js part</h2>\n<p>Let&#39;s see how we can make this dark mode toggle with <code>useEffect</code> and <code>useState</code>.\nFirst, let&#39;s create a button that will change the class of our <code>main</code> element.</p>\n<p>When we click on the button we toggle the <code>theme</code> thanks to React hooks.</p>\n<pre><code class=\"language-js\">import { useState } from &#39;react&#39;;\n\nexport default function Main(props) {\n  const [theme, setTheme] = useState(&#39;&#39;);\n\n  const switchTheme = () =&gt; {\n    const newTheme = theme === &#39;light&#39; ? &#39;dark&#39; : &#39;light&#39;;\n    setTheme(newTheme);\n  }\n\n  return (\n    &lt;main className={theme}&gt;\n      &lt;button onClick={switchTheme} theme={theme}&gt;\n        {theme === &quot;dark&quot; ? &quot;Switch to light mode&quot; : &quot;Switch to dark mode&quot;}\n      &lt;/button&gt;\n    &lt;/main&gt;\n  )\n}</code></pre>\n<p>We have a functional button toggling between dark and light modes. However, it will not save anything and if we reload the page, we will face a light mode whatever we opted for. That&#39;s where we use <code>localStorage</code>.</p>\n<p>In order to access the window object and therefore the localStorage, we must ensure the page has fully loaded. We do this with the <code>useEffect(() =&gt; {...}, [])</code>.\nWe can then check localStorage and if there is an entry for <code>theme</code> we apply it.</p>\n<p>We also update the <code>switchTheme</code> to save our theme preference in localStorage.</p>\n<pre><code class=\"language-js\">import { useEffect, useState } from &#39;react&#39;;\n\nexport default function Main(props) {\n  const [theme, setTheme] = useState(&#39;&#39;);\n\n  useEffect(() =&gt; {\n      let localTheme = window.localStorage.getItem(&#39;theme&#39;);\n      setTheme(localTheme);\n  }, [])\n\n  const switchTheme = () =&gt; {\n    const newTheme = theme === &#39;light&#39; ? &#39;dark&#39; : &#39;light&#39;;\n    window.localStorage.setItem(&#39;theme&#39;, newTheme);\n    setTheme(newTheme);\n  }\n\n  return (\n    &lt;main className={theme}&gt;\n      &lt;button onClick={switchTheme} theme={theme}&gt;\n        {theme === &quot;dark&quot; ? &quot;Switch to light mode&quot; : &quot;Switch to dark mode&quot;}\n      &lt;/button&gt;\n    &lt;/main&gt;\n  )\n}</code></pre>\n<p>You should have a functional dark mode toggle in your Next.js app by now, otherwise check the steps again or click the full solution link below.</p>\n<p><strong>TLDR</strong>: <a href=\"https://codesandbox.io/s/darkmode-0ubir\">Codesandbox: Dark mode toggle in Next.js</a>.</p>\n<blockquote>\n<p>I really wanted to share my solution for this, as I found it particularly difficult to make it run, especially with the <code>localStorage</code>. I hope it will make your coding easier.</p>\n</blockquote>\n<p>Enjoy coding with Next.js!</p>\n","date":"01/15/2022","categories":"next.js, tutorial"}},"__N_SSG":true}