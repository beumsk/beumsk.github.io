{"pageProps":{"posts":[{"slug":"css-only-responsive-navbar","title":"CSS only responsive Navbar","intro":"How to build a CSS responsive navigation bar menu without JavaScript","img":"/images/posts/css-only-responsive-navbar.jpg","date":"10/31/2022","categories":"css, tutorial","link":"/blog/css-only-responsive-navbar"},{"slug":"change-nextjs-error-pages","title":"Change Next.js error pages","intro":"How to change the default Next.js error pages and make it your own","img":"/images/posts/change-nextjs-error-pages.jpg","date":"08/17/2022","categories":"next.js, tutorial","link":"/blog/change-nextjs-error-pages"},{"slug":"get-web-analytics-in-nextjs-with-goatcounter","title":"Get web analytics in Next.js with Goatcounter","intro":"How to track your Next.js web analytics without tracking of personal data with Goatcounter","img":"/images/posts/get-web-analytics-in-nextjs-with-goatcounter.jpg","date":"04/07/2022","categories":"next.js, tutorial, analytics","link":"/blog/get-web-analytics-in-nextjs-with-goatcounter"},{"slug":"generate-a-sitemap-in-nextjs","title":"Generate a sitemap in Next.js","intro":"How to generate an automatic and custom sitemap in your Next.js build?","img":"/images/posts/generate-a-sitemap-in-nextjs.jpg","date":"02/25/2022","categories":"next.js, tutorial","link":"/blog/generate-a-sitemap-in-nextjs"},{"slug":"set-up-eslint-into-nextjs","title":"Set up ESLint into Next.js","intro":"How to set up the ESLint linter into a Next.js project","img":"/images/posts/set-up-eslint-into-nextjs.jpg","date":"02/11/2022","categories":"next.js, tutorial","link":"/blog/set-up-eslint-into-nextjs"},{"slug":"fix-the-window-is-not-defined-error","title":"Fix the Window is not defined error","intro":"How to fix the error Window is not defined in Next.js","img":"/images/posts/fix-the-window-is-not-defined-error.jpg","date":"01/22/2022","categories":"next.js, tutorial","link":"/blog/fix-the-window-is-not-defined-error"},{"slug":"nextjs-dark-mode","title":"Next.js dark mode","intro":"How to add a dark mode to your Next.js site","img":"/images/posts/nextjs-dark-mode.jpg","date":"01/15/2022","categories":"next.js, tutorial","link":"/blog/nextjs-dark-mode"},{"slug":"markdown-tutorial","title":"Markdown Tutorial","intro":"Introduction tutorial to the Markdown language","img":"/images/posts/markdown-tutorial.jpg","date":"12/28/2021","categories":"tutorial","link":"/blog/markdown-tutorial"},{"slug":"set-nextjs-lang","title":"Set Next.js lang","intro":"Specify HTML lang attribute in a Next.js site","img":"/images/posts/set-nextjs-lang.jpg","date":"12/27/2021","categories":"next.js, tutorial","link":"/blog/set-nextjs-lang"}],"content":"<p>Sitemaps are important for web crawlers such as google bots, and therefore we need one to improve our site&#39;s SEO.</p>\n<p>Sadly, Next.js does not provide a go-to option regarding sitemap and I find the external libraries too limited. I tested <code>nextjs-sitemap-generator</code>, but I couldn&#39;t make it define the <code>lastmod</code> or <code>changefreq</code> with precision. </p>\n<p>I decided to create something custom and firstly tried to make something with a <code>sitemap.xml.js</code> page. It wasn&#39;t a success because I couldn&#39;t make it an .xml file.</p>\n<p>I went a different way and built a <code>.mjs</code> file with the purpose of creating my <code>sitemap.xml</code>. It uses Node&#39;s file creation, <code>Globby</code> to crawl files and <code>Prettier</code> to format it.</p>\n<p>Let&#39;s walk through the steps of creating our custom sitemap generator together.</p>\n<h2 id=\"first-version\">First version</h2>\n<p>We want to make sure the <code>.mjs</code> script creates the sitemap.xml. We will achieve this with Node.</p>\n<pre><code class=\"language-js\">import { writeFileSync } from &#39;fs&#39;;\n\nasync function generate() {\n  const prettierConfig = await prettier.resolveConfig(&#39;./.prettierrc.js&#39;);\n  const pages = [\n    &#39;&#39;,\n    &#39;about&#39;,\n    &#39;contact&#39;\n  ];\n  const baseUrl = &#39;https://your-url.com&#39;;\n  const sitemap = `\n    &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n    &lt;urlset xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n      xsi:schemaLocation=&quot;http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd&quot;\n      xmlns=&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;&gt;\n      ${pages\n        .map((page) =&gt; {\n          return `\n            &lt;url&gt;\n              &lt;loc&gt;${baseUrl}/${path}&lt;/loc&gt;\n              &lt;changefreq&gt;monthly&lt;/changefreq&gt;\n            &lt;/url&gt;\n          `;\n        })\n        .join(&#39;&#39;)}\n    &lt;/urlset&gt;\n  `;\n\n  writeFileSync(&#39;public/sitemap.xml&#39;, formatted);\n}\n\ngenerate();\n</code></pre>\n<p>If you don&#39;t know much about the topic, <a href=\"https://sitemaps.org/protocol.html\">read more about the sitemap protocol</a>.</p>\n<h2 id=\"focus-on-the-files-you-want-in-the-sitemap\">Focus on the files you want in the sitemap</h2>\n<p>We now want something that actually represents our website content. We will do that with <code>Globby</code> and we will fix the code format with <code>Prettier</code>.</p>\n<pre><code class=\"language-js\">import { writeFileSync } from &#39;fs&#39;;\nimport { globby } from &#39;globby&#39;;\nimport prettier from &#39;prettier&#39;;\nasync function generate() {\n  const prettierConfig = await prettier.resolveConfig(&#39;./.prettierrc.js&#39;);\n  const pages = await globby(\n    [\n      // we list all .js files under /pages\n      &#39;pages/*.js&#39;\n      // we could add more specific files to the list such as .md\n    ],\n    // this line gets us more data check the doc: https://nodejs.org/api/fs.html#class-fsstats\n    { stats: true }\n  );\n  const baseUrl = &#39;https://your-url.com&#39;;\n  const sitemap = `\n    &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n    &lt;urlset xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n      xsi:schemaLocation=&quot;http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd&quot;\n      xmlns=&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;&gt;\n      ${pages\n        .map((page) =&gt; {\n          const path = page.path\n            .replace(&#39;pages/&#39;, &#39;&#39;)\n            .replace(&#39;index&#39;, &#39;&#39;)\n            .replace(&#39;.js&#39;, &#39;&#39;);\n\n          return `\n            &lt;url&gt;\n              &lt;loc&gt;${baseUrl}/${path}&lt;/loc&gt;\n              &lt;lastmod&gt;${page.stats.mtime}&lt;/lastmod&gt;\n              &lt;changefreq&gt;monthly&lt;/changefreq&gt;\n            &lt;/url&gt;\n          `;\n        })\n        .join(&#39;&#39;)}\n    &lt;/urlset&gt;\n  `;\n\n  const formatted = prettier.format(sitemap, {\n    ...prettierConfig,\n    parser: &#39;html&#39;,\n  });\n\n  writeFileSync(&#39;public/sitemap.xml&#39;, formatted);\n}\n\ngenerate();</code></pre>\n<p>We have something working but still too generic, especially the <code>changefreq</code> and the missing <code>priority</code>.</p>\n<h2 id=\"improve-the-logic-based-on-your-needs\">Improve the logic based on your needs</h2>\n<p>From this point, we want every entry of our sitemap to reflect its content. Let&#39;s add some function logic for this purpose.</p>\n<pre><code class=\"language-js\">import { writeFileSync } from &#39;fs&#39;;\nimport { globby } from &#39;globby&#39;;\nimport prettier from &#39;prettier&#39;;\n\nasync function generate() {\n  const prettierConfig = await prettier.resolveConfig(&#39;./.prettierrc.js&#39;);\n  const pages = await globby(\n    [\n      &#39;pages/*.js&#39;\n    ],\n    { stats: true }\n  );\n  const baseUrl = &#39;https://your-url.com&#39;;\n\n  const sitemap = `\n    &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n    &lt;urlset xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;\n      xsi:schemaLocation=&quot;http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd&quot;\n      xmlns=&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;&gt;\n\n      ${pages\n        .map((page) =&gt; {\n          const path = page.path\n            .replace(&#39;pages/&#39;, &#39;&#39;)\n            .replace(&#39;index&#39;, &#39;&#39;)\n            .replace(&#39;.js&#39;, &#39;&#39;)\n\n          return `\n            &lt;url&gt;\n              &lt;loc&gt;${baseUrl}/${path}&lt;/loc&gt;\n              &lt;lastmod&gt;${convertDate(page.stats.mtime)}&lt;/lastmod&gt;\n              &lt;changefreq&gt;${changefreq(path)}&lt;/changefreq&gt;\n              &lt;priority&gt;${priority(path)}&lt;/priority&gt;\n            &lt;/url&gt;\n          `;\n        })\n        .join(&#39;&#39;)}\n    &lt;/urlset&gt;\n    `;\n\n  const formatted = prettier.format(sitemap, {\n    ...prettierConfig,\n    parser: &#39;html&#39;,\n  });\n\n  writeFileSync(&#39;public/sitemap.xml&#39;, formatted);\n}\n\ngenerate();\n\nfunction priority(path) {\n  switch (path) {\n    case &#39;&#39;:\n      return &#39;1.0&#39;;\n    case &#39;about&#39;:\n      return &#39;0.8&#39;;\n    default:\n      return &#39;0.6&#39;;\n  }\n}\n\nfunction changefreq(path) {\n  switch (path) {\n    case &#39;&#39;:\n      return &#39;weekly&#39;;\n    case &#39;about&#39;:\n      return &#39;monthly&#39;;\n    default:\n      return &#39;yearly&#39;;\n  }\n}\n\n// convert date to format yyyy-mm-dd\nfunction convertDate(inputFormat) {\n  function pad(s) {\n    return s &lt; 10 ? &#39;0&#39; + s : s;\n  }\n  var d = new Date(inputFormat);\n  return [d.getFullYear(), pad(d.getMonth() + 1), pad(d.getDate())].join(&#39;-&#39;);\n}</code></pre>\n<p>We have built a complete sitemap with specific URL, last modification date, change frequency and priority.\nCheck out <a href=\"https://github.com/sindresorhus/globby\">the globby documentation for more possibilities</a>.</p>\n<p><strong>TLDR</strong>: <a href=\"https://codesandbox.io/s/custom-sitemap-i3jvko\">Codesandbox: Custom sitemap in Next.js</a>.</p>\n<p>Would you improve this code or do it in another way? Don&#39;t hesitate to share your ideas!</p>\n<p>Enjoy coding with Next.js!</p>\n","title":"Generate a sitemap in Next.js","description":"How to generate an automatic and custom sitemap in your Next.js build?","img":"/images/posts/generate-a-sitemap-in-nextjs.jpg","url":"https://remybeumier.be/blog/generate-a-sitemap-in-nextjs","date":"02/25/2022","categories":"next.js, tutorial"},"__N_SSG":true}