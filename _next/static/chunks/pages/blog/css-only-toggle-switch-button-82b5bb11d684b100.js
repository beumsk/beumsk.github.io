(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[64],{4379:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/css-only-toggle-switch-button",function(){return t(3079)}])},3205:function(e,n,t){"use strict";t.d(n,{Z:function(){return i}});var s=t(5893),o=t(9786);function i(e){var n=e.className,t=e.pen,i=e.title;return(0,s.jsx)(s.Fragment,{children:(0,s.jsx)("div",{className:"code-iframe-wrapper "+(n||""),children:(0,s.jsxs)("iframe",{height:"300",scrolling:"no",title:i,loading:"lazy",src:"https://codepen.io/beumsk/embed/"+t+"?default-tab=result",children:[(0,s.jsx)(o.Z,{href:"https://codepen.io/beumsk/pen/"+t,children:"See the Pen"}),"by",(0,s.jsx)(o.Z,{href:"https://codepen.io/beumsk",children:"R\xe9my Beumier"})]})})})}},3079:function(e,n,t){"use strict";t.r(n);var s=t(5893),o=t(1151),i=t(4911),c=t(9786),r=t(3205),l=function(e){var n=e.children;return(0,s.jsx)(i.Z,{children:n})};function a(e){var n=Object.assign({p:"p",h2:"h2",pre:"pre",code:"code",blockquote:"blockquote",strong:"strong"},(0,o.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["The trend seems to be working with JavaScript more and more and to dislike CSS. However, as stated in a previous post about ",(0,s.jsx)(c.Z,{href:"/blog/css-only-responsive-navbar",children:"a Navbar that works without any JS"}),", I really love building components with CSS only."]}),"\n",(0,s.jsx)(n.p,{children:"In a recent project I had to build an entire component library, and since I spent quite some time on a few components to match the designs that were sometimes challenging, I will share the most interesting ones in a series of blog posts."}),"\n",(0,s.jsx)(n.p,{children:"This piece will be about the widely used toggle switch form element. I think it could come from the browsers in the future with a proper HTML tag, but I didn't see anything communicated in that way, in the meantime let's develop it! As for other CSS components, I aim a fair level of browser compatibility and accessibility."}),"\n",(0,s.jsx)(n.h2,{children:"Start from the checkbox element"}),"\n",(0,s.jsx)(n.p,{children:"This approach of starting our switch element from the existing checkbox will help greatly regarding accessibility and general usage. We see here after how we code our HTML. The parent div is not useful, but I like to have a wrapper element and the label must be after the input."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-html",children:'<div class="switch">\n  <input type="checkbox" id="switch" />\n  <label for="switch">Switch label</label>\n</div>\n'})}),"\n",(0,s.jsxs)(n.p,{children:["At this stage, we will only ensure that our checkbox design is ignored completely by removing its ",(0,s.jsx)(n.code,{children:"appearance"})," and ",(0,s.jsx)(n.code,{children:"margin"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scss",children:".switch input[type='checkbox'] {\n  appearance: none;\n  display: block;\n  margin: 0;\n}\n"})}),"\n",(0,s.jsx)(n.h2,{children:"Add toggle switch typical design"}),"\n",(0,s.jsx)(n.p,{children:"Sadly, we cannot add before and after directly on a checkbox element as for the majority of form elements. We make use of the label element to helps us create the needed space for our toggle, but not only."}),"\n",(0,s.jsxs)(n.p,{children:["Here is are the few lines for the ",(0,s.jsx)(n.code,{children:"label"})," itself."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scss",children:".switch label {\n  display: block;\n  height: 2.375rem;\n  position: relative;\n  cursor: pointer;\n  padding: 0.625rem 0 0.625rem 4.5rem;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The second bit of CSS for this will rely on the ",(0,s.jsx)(n.code,{children:"::before"})," pseudo-element to create the back of the switch."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scss",children:".switch input[type='checkbox'] + label::before {\n  content: 'No';\n  display: block;\n  position: absolute;\n  top: calc(0.375rem - 1px);\n  left: 0;\n  padding: 0.375rem 0.5rem;\n  height: 1.75rem;\n  width: 3.75rem;\n  text-align: right;\n  font-size: 0.875rem;\n  color: #ffffff;\n  background-color: #8f8f8f;\n  border-radius: 9999px;\n  box-shadow: 0 0 0 1px #e0e0e0;\n  transition: all 0.3s cubic-bezier(0.72, 0.26, 0.26, 0.82), visibility 0s;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The third part of CSS will focus on the ",(0,s.jsx)(n.code,{children:"::after"})," pseudo-element to create the front of the toggle."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scss",children:".switch input[type='checkbox'] + label::after {\n  content: '';\n  display: block;\n  position: absolute;\n  top: calc(0.375rem - 1px);\n  left: 0;\n  height: 1.75rem;\n  width: 1.75rem;\n  background-color: #ffffff;\n  border: solid 0.25rem #8f8f8f;\n  border-radius: 9999px;\n  transition: all 0.3s cubic-bezier(0.72, 0.26, 0.26, 0.82), visibility 0s;\n}\n"})}),"\n",(0,s.jsx)(n.h2,{children:"Build the check logic"}),"\n",(0,s.jsxs)(n.p,{children:["We designed the switch in the previous part; but how will we add the click logic to handle the check or uncheck state? Let's benefit from the ",(0,s.jsx)(n.code,{children:":checked"})," pseudo-class selector to modify the switch when it's in checked state. We are also using the ",(0,s.jsx)(n.code,{children:"+"})," adjacent sibling combinator to target the label ",(0,s.jsx)(n.code,{children:"::before"})," and ",(0,s.jsx)(n.code,{children:"::after"}),". That's why we had to place the label after the checkbox input."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scss",children:".switch input[type='checkbox']:checked + label::before {\n  content: 'Yes';\n  text-align: left;\n  background-color: #008000;\n}\n\n.switch input[type='checkbox']:checked + label::after {\n  left: 2rem;\n  border-color: #008000;\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Let's also add a focus state for better accessibility."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scss",children:".switch input[type='checkbox']:focus + label::before,\n.switch input[type='checkbox']:focus-visible + label::before {\n  box-shadow: 0 0 0 4px #e0e0e0;\n}\n"})}),"\n",(0,s.jsx)(n.h2,{children:"Handle the disabled and focus states"}),"\n",(0,s.jsxs)(n.p,{children:["Last but not least, we have to design the switch to show a ",(0,s.jsx)(n.code,{children:":disabled"})," state, both ",(0,s.jsx)(n.code,{children:":checked"})," or not."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-scss",children:".switch input[type='checkbox']:disabled + label {\n  cursor: not-allowed;\n  &::before {\n    background-color: #f5f5f5;\n    color: #e0e0e0;\n  }\n  &::after {\n    background-color: #e0e0e0;\n    border-color: #f5f5f5;\n  }\n}\n\n.switch input[type='checkbox']:checked:disabled + label {\n  &::before {\n    background-color: #f5f5f5;\n    color: #707070;\n  }\n  &::after {\n    background-color: #707070;\n    border-color: #f5f5f5;\n  }\n}\n"})}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["If you are not at ease with Sass, you can copy and paste it and transpile to CSS on ",(0,s.jsx)(c.Z,{href:"https://www.sassmeister.com/",children:"https://www.sassmeister.com/"})," or ",(0,s.jsx)(c.Z,{href:"https://sass.js.org/",children:"https://sass.js.org/"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{children:"Final switch look and feel"}),"\n",(0,s.jsxs)(n.p,{children:["We made it! An accessible, good-looking and working switch toggle button. You may have noticed that it's also using ",(0,s.jsx)(n.code,{children:"rem"})," which means it will adapt with the font-size of the html element."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"TLDR"}),": Find the complete solution for this ",(0,s.jsx)(c.Z,{href:"https://codepen.io/beumsk/pen/xxzyNxP",children:"CSS only toggle switch button on Codepen"}),". Please be at peace taking inspiration from it and integrate it in your next project."]}),"\n",(0,s.jsx)(r.Z,{pen:"xxzyNxP",title:"CSS only toggle switch button on Codepen"}),"\n",(0,s.jsx)(n.p,{children:"Enjoy coding with CSS!"})]})}n.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,s.jsx)(l,Object.assign({},e,{children:(0,s.jsx)(a,e)}))}}},function(e){e.O(0,[838,151,365,594,805,136,911,774,888,179],(function(){return n=4379,e(e.s=n);var n}));var n=e.O();_N_E=n}]);