(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[249],{3570:function(e,n,s){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/set-up-typescript-into-nextjs",function(){return s(9879)}])},4152:function(e,n,s){"use strict";s.d(n,{Z:function(){return r}});var t=s(5893),i=s(9786);function r(e){var n=e.className,s=e.sandbox,r=e.title;return(0,t.jsx)(t.Fragment,{children:(0,t.jsx)("div",{className:"code-iframe-wrapper "+(n||""),children:(0,t.jsx)("iframe",{height:"300",title:r,loading:"lazy",src:"https://codesandbox.io/embed/"+s+"?fontsize=14&theme=dark",sandbox:"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts",children:(0,t.jsx)(i.Z,{href:"https://codesandbox.io/s/"+s,children:"See the Sandbox by R\xe9my Beumier"})})})})}},9879:function(e,n,s){"use strict";s.r(n);var t=s(5893),i=s(1151),r=s(4911),o=s(9786),c=(s(4152),function(e){var n=e.children;return(0,t.jsx)(r.Z,{children:n})});function l(e){var n=Object.assign({p:"p",strong:"strong",h2:"h2",ol:"ol",li:"li",code:"code",ul:"ul",pre:"pre"},(0,i.ah)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:'I have been against TypeScript for a long time, because I thought I knew better and typing was a waste of time, only meant for distracted developers. I remember reading somewhere "TypeScript, once you go, you never go back". I guess it\'s obvious by now that it was all true. I am now a TypeScript advocate and we will see how to set it up in a Next.js project.'}),"\n",(0,t.jsx)("blockquote",{children:(0,t.jsx)(n.strong,{children:"TypeScript, once you go, you never go back"})}),"\n",(0,t.jsx)(n.p,{children:"Setting up TypeScript in a Next.js project is straightforward and can be done in a few simple steps. This guide will first walk us through setting up TypeScript in a new Next.js project, which is a breeze. Secondly, we will see how adding TypeScript to an existing project works."}),"\n",(0,t.jsx)(n.h2,{children:"Setting Up TypeScript in a New Next.js Project"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Create a new Next.js project:"}),"\n",(0,t.jsx)(n.p,{children:"Run the following command to create a new Next.js project:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"npx create-next-app@latest my-nextjs-app --typescript"})}),"\n",(0,t.jsx)(n.p,{children:"This command will create a new Next.js project with TypeScript already configured."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Navigate to our project directory:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"cd my-nextjs-app"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Start the development server:"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"npm run dev"})," or ",(0,t.jsx)(n.code,{children:"yarn dev"})]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Adapt TypeScript configuration:"}),"\n",(0,t.jsx)(n.p,{children:"Next.js will automatically create a tsconfig.json file for us when we run the development server. This file will be generated in our project root."}),"\n",(0,t.jsx)(n.p,{children:"Check out an example of a tsconfig.json file in the next section."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Our new Next.js project with TypeScript is now up and running!"}),"\n",(0,t.jsx)(n.h2,{children:"Adding TypeScript to an Existing Next.js Project"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Install TypeScript and necessary types: In our existing Next.js project, run the following command to install TypeScript and the necessary type definitions:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"npm install --save-dev typescript @types/react @types/node"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Create a tsconfig.json file: Next.js will automatically create a tsconfig.json file for us when we run the development server. Run the following command:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"npm run dev"})}),"\n",(0,t.jsx)(n.p,{children:"This will generate a tsconfig.json file in our project root."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Rename our files to TypeScript: Rename our JavaScript files (.js and .jsx) to TypeScript files (.ts and .tsx). For example:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"pages/index.js -> index.tsx"}),"\n",(0,t.jsx)(n.li,{children:"components/MyComponent.js -> components/MyComponent.tsx"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Fix any TypeScript errors: As we rename our files, we may encounter TypeScript errors. Address these errors by adding type annotations and fixing any issues that TypeScript identifies."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Update our tsconfig.json: We may want to customize our tsconfig.json file to suit our project's needs. Here is an example configuration:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "compilerOptions": {\n    "target": "ES6",\n    "lib": ["dom", "dom.iterable", "esnext"],\n    "allowJs": true,\n    "skipLibCheck": true,\n    "strict": false,\n    "forceConsistentCasingInFileNames": true,\n    "noEmit": true,\n    "incremental": true,\n    "esModuleInterop": true,\n    "module": "esnext",\n    "moduleResolution": "node",\n    "resolveJsonModule": true,\n    "isolatedModules": true,\n    "jsx": "preserve"\n  },\n  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],\n  "exclude": ["node_modules"]\n}\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Optionnally, we can add paths to our tsconfig.json to make our imports cleaner:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json",children:'{\n  "compilerOptions": {\n    // ...\n    "paths": {\n      "@components/*": ["components/*"],\n      "@hooks/*": ["hooks/*"],\n      "@utils/*": ["utils/*"],\n      "@types/*": ["types/*"]\n    }\n  }\n}\n'})}),"\n",(0,t.jsx)(n.p,{children:"Here is an example import line using the paths:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"import { Header } from '@components/header';"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Run the development server: Finally, we start our development server to ensure everything is working correctly:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"npm run dev"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Additionnally, a good practice is to ensure build is not throwing any errors:"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"npm run build"})}),"\n"]}),"\n"]}),"\n","\n",(0,t.jsxs)(n.p,{children:["We are all set to code efficiently with the help of TypeScript. Should we want more automation power, we should consider ",(0,t.jsx)(o.Z,{href:"/blog/set-up-eslint-into-nextjs",children:"adding ESLint and Prettier to our project"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"TLDR"}),": ",(0,t.jsx)(o.Z,{href:"https://codesandbox.io/p/devbox/setup-nextjs-typescript-mn8cd3",children:"Codesandbox: Set up Next.js with TypeScript"}),"."]}),"\n",(0,t.jsxs)(n.p,{children:["Since Next.js is moving fast, we should keep an eye on the ",(0,t.jsx)(o.Z,{href:"https://nextjs.org/docs/pages/api-reference/config/typescript",children:"official Next.js TS documentation"})," for TypeScript updates."]}),"\n",(0,t.jsx)(n.p,{children:"Enjoy coding with Next.js!"})]})}n.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,t.jsx)(c,Object.assign({},e,{children:(0,t.jsx)(l,e)}))}}},function(e){e.O(0,[838,151,365,594,805,136,911,774,888,179],(function(){return n=3570,e(e.s=n);var n}));var n=e.O();_N_E=n}]);