{"pageProps":{"posts":[{"slug":"css-only-responsive-navbar","title":"CSS only responsive Navbar","intro":"How to build a CSS responsive navigation bar menu without JavaScript","img":"/images/posts/css-only-responsive-navbar.jpg","date":"10/31/2022","categories":"css, tutorial","link":"/blog/css-only-responsive-navbar"},{"slug":"change-nextjs-error-pages","title":"Change Next.js error pages","intro":"How to change the default Next.js error pages and make it your own","img":"/images/posts/change-nextjs-error-pages.jpg","date":"08/17/2022","categories":"next.js, tutorial","link":"/blog/change-nextjs-error-pages"},{"slug":"get-web-analytics-in-nextjs-with-goatcounter","title":"Get web analytics in Next.js with Goatcounter","intro":"How to track your Next.js web analytics without tracking of personal data with Goatcounter","img":"/images/posts/get-web-analytics-in-nextjs-with-goatcounter.jpg","date":"04/07/2022","categories":"next.js, tutorial, analytics","link":"/blog/get-web-analytics-in-nextjs-with-goatcounter"},{"slug":"generate-a-sitemap-in-nextjs","title":"Generate a sitemap in Next.js","intro":"How to generate an automatic and custom sitemap in your Next.js build?","img":"/images/posts/generate-a-sitemap-in-nextjs.jpg","date":"02/25/2022","categories":"next.js, tutorial","link":"/blog/generate-a-sitemap-in-nextjs"},{"slug":"set-up-eslint-into-nextjs","title":"Set up ESLint into Next.js","intro":"How to set up the ESLint linter into a Next.js project","img":"/images/posts/set-up-eslint-into-nextjs.jpg","date":"02/11/2022","categories":"next.js, tutorial","link":"/blog/set-up-eslint-into-nextjs"},{"slug":"fix-the-window-is-not-defined-error","title":"Fix the Window is not defined error","intro":"How to fix the error Window is not defined in Next.js","img":"/images/posts/fix-the-window-is-not-defined-error.jpg","date":"01/22/2022","categories":"next.js, tutorial","link":"/blog/fix-the-window-is-not-defined-error"},{"slug":"nextjs-dark-mode","title":"Next.js dark mode","intro":"How to add a dark mode to your Next.js site","img":"/images/posts/nextjs-dark-mode.jpg","date":"01/15/2022","categories":"next.js, tutorial","link":"/blog/nextjs-dark-mode"},{"slug":"markdown-tutorial","title":"Markdown Tutorial","intro":"Introduction tutorial to the Markdown language","img":"/images/posts/markdown-tutorial.jpg","date":"12/28/2021","categories":"tutorial","link":"/blog/markdown-tutorial"},{"slug":"set-nextjs-lang","title":"Set Next.js lang","intro":"Specify HTML lang attribute in a Next.js site","img":"/images/posts/set-nextjs-lang.jpg","date":"12/27/2021","categories":"next.js, tutorial","link":"/blog/set-nextjs-lang"}],"content":"<p>I do more and more JavaScript because of the usual requirements in projects, but I will always love a useful, adaptable and cross-browser working CSS trick.</p>\n<p>I recently had to build an advanced header navigation and for some reasons it was easier not to use any JavaScript for this. Even though I knew for sure I could handle big screen layout and transitions with CSS only, I thought complexity would come with smaller devices and thus organizing the links differently.</p>\n<p>I also wanted a single navigation in HTML to avoid duplication of code and a fair level of browser compatibility (by fair I mean no IE).</p>\n<p>Without further ado, let&#39;s dive into a working solution for our case with a first step into the HTML. It&#39;s kept dead simple, except for the checkbox that we will understand later.</p>\n<h2 id=\"the-html-structure-for-the-navigation\">The HTML structure for the navigation</h2>\n<pre><code class=\"language-html\">&lt;header class=&quot;header&quot;&gt;\n  &lt;!-- this checkbox handles the hide/show menu logic --&gt;\n  &lt;input type=&quot;checkbox&quot; class=&quot;header__burger&quot;&gt;\n\n  &lt;a href=&quot;https://remybeumier.be&quot; target=&quot;_blank&quot; class=&quot;header__logo&quot;&gt;\n    &lt;img src=&quot;path&quot; alt=&quot;alt&quot; /&gt;\n  &lt;/a&gt;\n\n  &lt;div class=&quot;header__links&quot;&gt;\n    &lt;a href=&quot;#0&quot; class=&quot;header__link&quot;&gt;Link with sublinks&lt;/a&gt;\n    &lt;div class=&quot;header__sublinks&quot;&gt;\n      &lt;a href=&quot;#0&quot;&gt;Sublink&lt;/a&gt;\n      &lt;a href=&quot;#0&quot;&gt;Sublink&lt;/a&gt;\n      &lt;a href=&quot;#0&quot;&gt;Sublink&lt;/a&gt;\n      &lt;a href=&quot;#0&quot;&gt;Sublink&lt;/a&gt;\n      &lt;a href=&quot;#0&quot;&gt;Sublink&lt;/a&gt;\n    &lt;/div&gt;\n    &lt;a href=&quot;#0&quot; class=&quot;header__link&quot;&gt;Link&lt;/a&gt;\n    &lt;a href=&quot;#0&quot; class=&quot;header__link&quot;&gt;Link&lt;/a&gt;\n    &lt;a href=&quot;#0&quot; class=&quot;header__link&quot;&gt;Link&lt;/a&gt;\n    &lt;a href=&quot;#0&quot; class=&quot;header__link&quot;&gt;Link&lt;/a&gt;\n  &lt;/div&gt;\n&lt;/header&gt;\n</code></pre>\n<p>If you don&#39;t risk any heart attack, you can check the result as of now. It will give you a &#39;wow&#39; effect when we will add some styling; Actually, I still have that great feeling after many years of web development.</p>\n<h2 id=\"small-screens-header-styling\">Small screens header styling</h2>\n<p>Following a mobile first mindset, we will start with the SCSS from the tiniest screens.</p>\n<pre><code class=\"language-scss\">.header {\n  box-shadow: 0px 3px 6px rgba(0, 0, 0, 0.15);\n  position: sticky;\n  top: 0;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: flex-start;\n  background-color: white;\n\n  .header__logo {\n    display: flex;\n    padding: 11px;\n    transition: background-color 0.3s ease-in-out;\n    &amp;:hover,\n    &amp;:focus {\n      background-color: #f5f5f5;\n    }\n    svg {\n      min-width: 32px;\n    }\n  }\n\n  .header__links {\n    display: none;\n    flex-direction: column;\n    padding: 8px 0;\n    border-top: solid 1px #e5e5e5;\n    width: 100%;\n  }\n\n  .header__link {\n    color: #333;\n    text-decoration: none;\n    padding: 8px 16px;\n    white-space: nowrap;\n    transition: background-color 0.3s ease-in-out, color 0.3s ease-in-out;\n    &amp;:hover,\n    &amp;:focus {\n      background-color: #f5fafb;\n      color: #80d0c7;\n    }\n    &amp;.active {\n      background-color: #f5fafb;\n    }\n    + .header__sublinks {\n      &gt; a {\n        display: block;\n        padding: 4px 8px;\n        margin-left: 16px;\n        color: #55626a;\n        font-size: 0.875rem;\n        text-decoration: none;\n        transition: background-color 0.3s ease-in-out, color 0.3s ease-in-out;\n        &amp;:hover,\n        &amp;:focus {\n          color: #80d0c7;\n          background-color: #f5fafb;\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<p>Should you need to convert it into CSS, don&#39;t hesitate to copy and paste it over <a target=\"_blank\" rel=\"noreferrer noopener nofollow\" href=\"https://www.sassmeister.com/\">https://www.sassmeister.com/</a> or <a target=\"_blank\" rel=\"noreferrer noopener nofollow\" href=\"https://sass.js.org/\">https://sass.js.org/</a>.</p>\n<p>Regarding the code, I don&#39;t think it contains anything fancy. We use <code>position: sticky</code> because it is so easy for top nav, a bit of <code>flex</code> layout and transitions but that&#39;s it for this part.</p>\n<h2 id=\"the-css-trick\">The CSS trick</h2>\n<p>Here is the gold of the article. We will see that we handle the toggle with the checkbox element and its <code>:checked</code> pseudo class. We also totally change its design to have a burger element.</p>\n<pre><code class=\"language-scss\">.header__burger {\n  position: absolute;\n  right: 0;\n  top: 0;\n  width: 54px;\n  height: 54px;\n  margin: 0;\n  appearance: none;\n  cursor: pointer;\n  transition: background-color 0.3s ease-in-out;\n  &amp;::after {\n    content: &quot;&quot;;\n    height: 24px;\n    width: 24px;\n    top: 15px;\n    left: 15px;\n    position: absolute;\n    background: linear-gradient(\n      to bottom,\n      #80d0c7 20%,\n      transparent 20% 40%,\n      #80d0c7 40% 60%,\n      transparent 60% 80%,\n      #80d0c7 80% 100%\n    );\n  }\n  &amp;:hover,\n  &amp;:focus {\n    background-color: #f5f5f5;\n  }\n  &amp;:checked {\n    ~ .header__links {\n      display: flex;\n    }\n  }\n}\n</code></pre>\n<p>The first comment about this snippet will be about the design of the checkbox. As you can see, we removed its default with <code>appearance: none</code> and we applied a gradient as background to mimic a burger menu. I could have avoided the <code>::after</code>, but I liked the idea to have a bigger click area. Of course, we could change this to an icon font, or a label pointing to the checkbox giving us a lot more possibilities.</p>\n<p>And secondly, we handle the show/hide logic. We are looking for the checkbox to be <code>:checked</code> <a target=\"_blank\" rel=\"noreferrer noopener nofollow\" href=\"https://caniuse.com/mdn-css_selectors_checked\">Browser compatibility on caniuse</a>, and we select the <code>.header__links</code> among its sibling with the <code>~</code> selector. As of now, we can nicely toggle the menu on or off without JavaScript.</p>\n<blockquote>\n<p>Some could argue a burger menu is not so user-friendly. I think given how widely it&#39;s used, a user will understand directly what it is and how to use it.</p>\n</blockquote>\n<h2 id=\"big-screens-header-styling\">Big screens header styling</h2>\n<p>I know it&#39;s not the core content of the article, but let&#39;s design our navigation completely and give it a nice look on desktops too.</p>\n<pre><code class=\"language-scss\">@media only screen and (min-width: 1024px) {\n  flex-direction: row;\n  align-items: center;\n\n  .header__links {\n    display: flex;\n    flex-direction: row;\n    padding: 0;\n    border-top: none;\n    width: auto;\n  }\n\n  .header__link {\n    display: inline-flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    text-align: center;\n    height: 54px;\n    padding: 9px 10px;\n    &amp;:hover,\n    &amp;:focus {\n      + .header__sublinks {\n        height: 42px;\n      }\n    }\n\n    + .header__sublinks {\n      display: flex;\n      justify-content: center;\n      position: absolute;\n      left: 0;\n      right: 0;\n      top: 54px;\n      height: 0;\n      overflow: hidden;\n      background-color: #f5fafb;\n      border-top: solid 1px #e5e5e5;\n      transition: height 0.3s ease-in-out;\n      &gt; a {\n        padding: 10px;\n        margin-left: 0;\n        color: #333;\n        font-size: 1rem;\n      }\n      &amp;:hover,\n      &amp;:focus-within {\n        height: 42px;\n      }\n    }\n  }\n\n  .header__burger {\n    display: none;\n  }\n}\n</code></pre>\n<p>There isn&#39;t much magic in those lines. We are hiding the burger checkbox and are giving the navbar a horizontal layout to be able to display every link nicely. The only challenge was to design the sublinks in a catchy way. By default we give that sub navigation <code>height: 0</code> and once we hover its parent link, we adjust the height with a smooth transition.</p>\n<h2 id=\"final-navigation-result\">Final navigation result</h2>\n<p><strong>TLDR</strong>: Find the complete solution for this <a target=\"_blank\" rel=\"noreferrer noopener nofollow\" href=\"https://codepen.io/beumsk/pen/bGKbZoV\">Responsive CSS only navigation bar using a burger menu on Codepen</a>. Feel free to take inspiration from it and adapt it to your exact need.</p>\n<p>Enjoy coding with CSS!</p>\n","title":"CSS only responsive Navbar","description":"How to build a CSS responsive navigation bar menu without JavaScript","img":"/images/posts/css-only-responsive-navbar.jpg","url":"https://remybeumier.be/blog/css-only-responsive-navbar","date":"10/31/2022","categories":"css, tutorial"},"__N_SSG":true}