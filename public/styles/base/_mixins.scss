// Spacing classes generation
@mixin generate-spacing-classes($prefix, $property) {
  $sizes: 0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25;
  $spacing: 0.25rem;

  @for $i from 1 through length($sizes) {
    $size: nth($sizes, $i);

    @if ($prefix =='mx' or $prefix =='px') {
      .#{$prefix}-#{$i - 1} {
        #{$property}-left: $spacing * $size !important;
        #{$property}-right: $spacing * $size !important;
      }
    }

    @else if ($prefix =='my' or $prefix =='py') {
      .#{$prefix}-#{$i - 1} {
        #{$property}-top: $spacing * $size !important;
        #{$property}-bottom: $spacing * $size !important;
      }
    }

    @else {
      .#{$prefix}-#{$i - 1} {
        #{$property}: $spacing * $size !important;
      }
    }
  }
}

$rules: (
  (ml, margin-left),
  (mr, margin-right),
  (mt, margin-top),
  (mb, margin-bottom),
  (mx, margin),
  (my, margin),
  (m, margin),
  (pl, padding-left),
  (pr, padding-right),
  (pt, padding-top),
  (pb, padding-bottom),
  (px, padding),
  (py, padding),
  (p, padding)
);

@each $item in $rules {
  @include generate-spacing-classes(nth($item, 1), nth($item, 2));
}

// Moving shapes
@mixin moving-shapes($class, $side, $top, $right, $sec, $rotate, $translateX, $translateY) {
  .#{$class} {
    &::before {
      content: '';
      position: absolute;
      background: var(--primary);
      box-shadow: 1.25rem 1.25rem var(--bg), 1.25rem 1.25rem 0 1px var(--text2);
      transform: rotate($rotate);
      width: $side;
      height: $side;
      top: $top;
      right: $right;
      animation: $class $sec infinite alternate linear;
    }
  }

  @keyframes #{$class} {
    100% {
      transform: translate($translateX, $translateY);
    }
  }
}